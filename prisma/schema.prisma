// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STUDENT
  DONOR
}

enum DonationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum DonationType {
  GENERAL_FUND
  INDIVIDUAL_STUDENT
  GROUP_CAMPAIGN
}

enum StudentStatus {
  PENDING_VERIFICATION
  VERIFIED
  REJECTED
  INACTIVE
}

enum DocumentType {
  LOAN_STATEMENT
  INCOME_VERIFICATION
  ENROLLMENT_PROOF
  TAX_DOCUMENT
  OTHER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(DONOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  // Role-specific relationships
  studentProfile   StudentProfile?
  donorProfile     DonorProfile?
  donations        Donation[]
  adminActions     AdminAction[]
  notificationsTo  Notification[] @relation("NotificationTo")
  notificationsFrom Notification[] @relation("NotificationFrom")
}

model StudentProfile {
  id                    String        @id @default(cuid())
  userId                String        @unique
  firstName             String
  lastName              String
  dateOfBirth           DateTime
  phone                 String?
  address               String
  city                  String
  state                 String
  zipCode               String

  // Academic info
  schoolName            String
  major                 String?
  graduationDate        DateTime?
  gpa                   Float?

  // Financial info
  totalDebtAmount       Float
  monthlyPayment        Float?
  interestRate          Float?
  loanServicer          String?
  employmentStatus      String?
  annualIncome          Float?

  // Profile settings
  isPublic              Boolean       @default(false)
  displayName           String?
  bio                   String?
  profileImageUrl       String?
  allowDirectDonations  Boolean       @default(true)

  // Verification
  status                StudentStatus @default(PENDING_VERIFICATION)
  verificationNotes     String?
  verifiedAt            DateTime?
  verifiedBy            String?

  // Plaid integration
  plaidAccessToken      String?
  plaidItemId           String?
  loanAccountsVerified  Boolean       @default(false)

  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents             Document[]
  donations             Donation[]    @relation("StudentDonations")
  groupMemberships      GroupCampaignMember[]
}

model DonorProfile {
  id                    String    @id @default(cuid())
  userId                String    @unique
  firstName             String?
  lastName              String?
  company               String?
  phone                 String?

  // Preferences
  isAnonymous           Boolean   @default(false)
  preferredDonationType DonationType?

  // Stripe
  stripeCustomerId      String?

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Document {
  id                String      @id @default(cuid())
  studentProfileId  String
  type              DocumentType
  fileName          String
  fileUrl           String
  fileSize          Int
  mimeType          String
  uploadedAt        DateTime    @default(now())

  // Verification
  isVerified        Boolean     @default(false)
  verifiedAt        DateTime?
  verifiedBy        String?
  verificationNotes String?

  studentProfile    StudentProfile @relation(fields: [studentProfileId], references: [id], onDelete: Cascade)
}

model Donation {
  id                String        @id @default(cuid())
  donorId           String
  studentId         String?
  groupCampaignId   String?

  amount            Float
  type              DonationType
  status            DonationStatus @default(PENDING)
  isAnonymous       Boolean       @default(false)
  message           String?

  // Tax deductible info
  isTaxDeductible   Boolean       @default(false)
  receiptUrl        String?

  // Stripe
  stripePaymentIntentId String?
  stripeChargeId        String?

  // Processing
  processedAt       DateTime?
  transferredAt     DateTime?

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  donor             User          @relation(fields: [donorId], references: [id])
  student           StudentProfile? @relation("StudentDonations", fields: [studentId], references: [id])
  groupCampaign     GroupCampaign? @relation(fields: [groupCampaignId], references: [id])

  @@index([donorId])
  @@index([studentId])
  @@index([groupCampaignId])
  @@index([status])
  @@index([type])
}

model GroupCampaign {
  id                String    @id @default(cuid())
  name              String
  description       String
  targetAmount      Float
  currentAmount     Float     @default(0)
  startDate         DateTime
  endDate           DateTime?
  isActive          Boolean   @default(true)

  // Tax info
  isTaxDeductible   Boolean   @default(false)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  members           GroupCampaignMember[]
  donations         Donation[]
}

model GroupCampaignMember {
  id                String    @id @default(cuid())
  groupCampaignId   String
  studentProfileId  String
  allocationPercent Float     // Percentage of donations this student receives

  createdAt         DateTime  @default(now())

  groupCampaign     GroupCampaign   @relation(fields: [groupCampaignId], references: [id], onDelete: Cascade)
  studentProfile    StudentProfile  @relation(fields: [studentProfileId], references: [id], onDelete: Cascade)

  @@unique([groupCampaignId, studentProfileId])
}

model AdminAction {
  id          String   @id @default(cuid())
  adminId     String
  action      String   // e.g., "VERIFIED_STUDENT", "REJECTED_APPLICATION", "TRANSFERRED_FUNDS"
  targetType  String   // e.g., "STUDENT", "DONATION", "DOCUMENT"
  targetId    String
  notes       String?
  metadata    Json?

  createdAt   DateTime @default(now())

  admin       User     @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([targetType, targetId])
}

model Notification {
  id        String   @id @default(cuid())
  toUserId  String
  fromUserId String?
  title     String
  message   String
  type      String   // e.g., "DONATION_RECEIVED", "VERIFICATION_STATUS", "SYSTEM"
  isRead    Boolean  @default(false)
  metadata  Json?

  createdAt DateTime @default(now())

  toUser    User     @relation("NotificationTo", fields: [toUserId], references: [id], onDelete: Cascade)
  fromUser  User?    @relation("NotificationFrom", fields: [fromUserId], references: [id])

  @@index([toUserId, isRead])
}